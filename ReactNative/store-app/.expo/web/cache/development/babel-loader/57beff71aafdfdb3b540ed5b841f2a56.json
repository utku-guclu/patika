{"ast":null,"code":"import _defineProperty2 from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nfunction _defineProperty(obj, key, value) {\n  key = _toPropertyKey(key);\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nfunction _toPropertyKey(arg) {\n  var key = _toPrimitive(arg, \"string\");\n  return typeof key === \"symbol\" ? key : String(key);\n}\nfunction _toPrimitive(input, hint) {\n  if (typeof input !== \"object\" || input === null) return input;\n  var prim = input[Symbol.toPrimitive];\n  if (prim !== undefined) {\n    var res = prim.call(input, hint || \"default\");\n    if (typeof res !== \"object\") return res;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (hint === \"string\" ? String : Number)(input);\n}\nimport { Background, getDefaultHeaderHeight, SafeAreaProviderCompat } from '@react-navigation/elements';\nimport Color from 'color';\nimport * as React from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { forModalPresentationIOS, forNoAnimation as forNoAnimationCard } from \"../../TransitionConfigs/CardStyleInterpolators\";\nimport { DefaultTransition, ModalFadeTransition, ModalTransition } from \"../../TransitionConfigs/TransitionPresets\";\nimport getDistanceForDirection from \"../../utils/getDistanceForDirection\";\nimport { MaybeScreen, MaybeScreenContainer } from \"../Screens\";\nimport { getIsModalPresentation } from \"./Card\";\nimport CardContainer from \"./CardContainer\";\nvar EPSILON = 1e-5;\nvar STATE_INACTIVE = 0;\nvar STATE_TRANSITIONING_OR_BELOW_TOP = 1;\nvar STATE_ON_TOP = 2;\nvar FALLBACK_DESCRIPTOR = Object.freeze({\n  options: {}\n});\nvar getInterpolationIndex = function getInterpolationIndex(scenes, index) {\n  var cardStyleInterpolator = scenes[index].descriptor.options.cardStyleInterpolator;\n  var interpolationIndex = 0;\n  for (var i = index - 1; i >= 0; i--) {\n    var _scenes$i;\n    var cardStyleInterpolatorCurrent = (_scenes$i = scenes[i]) === null || _scenes$i === void 0 ? void 0 : _scenes$i.descriptor.options.cardStyleInterpolator;\n    if (cardStyleInterpolatorCurrent !== cardStyleInterpolator) {\n      break;\n    }\n    interpolationIndex++;\n  }\n  return interpolationIndex;\n};\nvar getIsModal = function getIsModal(scene, interpolationIndex, isParentModal) {\n  if (isParentModal) {\n    return true;\n  }\n  var cardStyleInterpolator = scene.descriptor.options.cardStyleInterpolator;\n  var isModalPresentation = getIsModalPresentation(cardStyleInterpolator);\n  var isModal = isModalPresentation && interpolationIndex !== 0;\n  return isModal;\n};\nvar getHeaderHeights = function getHeaderHeights(scenes, insets, isParentHeaderShown, isParentModal, layout, previous) {\n  return scenes.reduce(function (acc, curr, index) {\n    var _curr$descriptor$opti = curr.descriptor.options,\n      _curr$descriptor$opti2 = _curr$descriptor$opti.headerStatusBarHeight,\n      headerStatusBarHeight = _curr$descriptor$opti2 === void 0 ? isParentHeaderShown ? 0 : insets.top : _curr$descriptor$opti2,\n      headerStyle = _curr$descriptor$opti.headerStyle;\n    var style = StyleSheet.flatten(headerStyle || {});\n    var height = 'height' in style && typeof style.height === 'number' ? style.height : previous[curr.route.key];\n    var interpolationIndex = getInterpolationIndex(scenes, index);\n    var isModal = getIsModal(curr, interpolationIndex, isParentModal);\n    acc[curr.route.key] = typeof height === 'number' ? height : getDefaultHeaderHeight(layout, isModal, headerStatusBarHeight);\n    return acc;\n  }, {});\n};\nvar getDistanceFromOptions = function getDistanceFromOptions(layout, descriptor) {\n  var _ref4 = (descriptor === null || descriptor === void 0 ? void 0 : descriptor.options) || {},\n    presentation = _ref4.presentation,\n    _ref4$gestureDirectio = _ref4.gestureDirection,\n    gestureDirection = _ref4$gestureDirectio === void 0 ? presentation === 'modal' ? ModalTransition.gestureDirection : DefaultTransition.gestureDirection : _ref4$gestureDirectio;\n  return getDistanceForDirection(layout, gestureDirection);\n};\nvar getProgressFromGesture = function getProgressFromGesture(gesture, layout, descriptor) {\n  var distance = getDistanceFromOptions({\n    width: Math.max(1, layout.width),\n    height: Math.max(1, layout.height)\n  }, descriptor);\n  if (distance > 0) {\n    return gesture.interpolate({\n      inputRange: [0, distance],\n      outputRange: [1, 0]\n    });\n  }\n  return gesture.interpolate({\n    inputRange: [distance, 0],\n    outputRange: [0, 1]\n  });\n};\nvar CardStack = function (_React$Component) {\n  _inherits(CardStack, _React$Component);\n  var _super = _createSuper(CardStack);\n  function CardStack(_props) {\n    var _this;\n    _classCallCheck(this, CardStack);\n    _this = _super.call(this, _props);\n    _defineProperty(_assertThisInitialized(_this), \"handleLayout\", function (e) {\n      var _e$nativeEvent$layout = e.nativeEvent.layout,\n        height = _e$nativeEvent$layout.height,\n        width = _e$nativeEvent$layout.width;\n      var layout = {\n        width: width,\n        height: height\n      };\n      _this.setState(function (state, props) {\n        if (height === state.layout.height && width === state.layout.width) {\n          return null;\n        }\n        return {\n          layout: layout,\n          headerHeights: getHeaderHeights(state.scenes, props.insets, props.isParentHeaderShown, props.isParentModal, layout, state.headerHeights)\n        };\n      });\n    });\n    _defineProperty(_assertThisInitialized(_this), \"handleHeaderLayout\", function (_ref) {\n      var route = _ref.route,\n        height = _ref.height;\n      _this.setState(function (_ref2) {\n        var headerHeights = _ref2.headerHeights;\n        var previousHeight = headerHeights[route.key];\n        if (previousHeight === height) {\n          return null;\n        }\n        return {\n          headerHeights: _objectSpread(_objectSpread({}, headerHeights), {}, _defineProperty2({}, route.key, height))\n        };\n      });\n    });\n    _defineProperty(_assertThisInitialized(_this), \"getFocusedRoute\", function () {\n      var state = _this.props.state;\n      return state.routes[state.index];\n    });\n    _defineProperty(_assertThisInitialized(_this), \"getPreviousScene\", function (_ref3) {\n      var route = _ref3.route;\n      var getPreviousRoute = _this.props.getPreviousRoute;\n      var scenes = _this.state.scenes;\n      var previousRoute = getPreviousRoute({\n        route: route\n      });\n      if (previousRoute) {\n        var previousScene = scenes.find(function (scene) {\n          return scene.descriptor.route.key === previousRoute.key;\n        });\n        return previousScene;\n      }\n      return undefined;\n    });\n    _this.state = {\n      routes: [],\n      scenes: [],\n      gestures: {},\n      layout: SafeAreaProviderCompat.initialMetrics.frame,\n      descriptors: _this.props.descriptors,\n      headerHeights: {}\n    };\n    return _this;\n  }\n  _createClass(CardStack, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n      var _this$props = this.props,\n        insets = _this$props.insets,\n        state = _this$props.state,\n        routes = _this$props.routes,\n        closingRouteKeys = _this$props.closingRouteKeys,\n        onOpenRoute = _this$props.onOpenRoute,\n        onCloseRoute = _this$props.onCloseRoute,\n        renderHeader = _this$props.renderHeader,\n        renderScene = _this$props.renderScene,\n        isParentHeaderShown = _this$props.isParentHeaderShown,\n        isParentModal = _this$props.isParentModal,\n        onTransitionStart = _this$props.onTransitionStart,\n        onTransitionEnd = _this$props.onTransitionEnd,\n        onGestureStart = _this$props.onGestureStart,\n        onGestureEnd = _this$props.onGestureEnd,\n        onGestureCancel = _this$props.onGestureCancel,\n        _this$props$detachIna = _this$props.detachInactiveScreens,\n        detachInactiveScreens = _this$props$detachIna === void 0 ? Platform.OS === 'web' || Platform.OS === 'android' || Platform.OS === 'ios' : _this$props$detachIna;\n      var _this$state = this.state,\n        scenes = _this$state.scenes,\n        layout = _this$state.layout,\n        gestures = _this$state.gestures,\n        headerHeights = _this$state.headerHeights;\n      var focusedRoute = state.routes[state.index];\n      var focusedHeaderHeight = headerHeights[focusedRoute.key];\n      var isFloatHeaderAbsolute = this.state.scenes.slice(-2).some(function (scene) {\n        var _scene$descriptor$opt;\n        var options = (_scene$descriptor$opt = scene.descriptor.options) != null ? _scene$descriptor$opt : {};\n        var headerMode = options.headerMode,\n          headerTransparent = options.headerTransparent,\n          _options$headerShown = options.headerShown,\n          headerShown = _options$headerShown === void 0 ? true : _options$headerShown;\n        if (headerTransparent || headerShown === false || headerMode === 'screen') {\n          return true;\n        }\n        return false;\n      });\n      var activeScreensLimit = 1;\n      for (var i = scenes.length - 1; i >= 0; i--) {\n        var options = scenes[i].descriptor.options;\n        var _options$detachPrevio = options.detachPreviousScreen,\n          detachPreviousScreen = _options$detachPrevio === void 0 ? options.presentation === 'transparentModal' ? false : getIsModalPresentation(options.cardStyleInterpolator) ? i !== scenes.map(function (scene) {\n            return scene.descriptor.options.cardStyleInterpolator;\n          }).lastIndexOf(forModalPresentationIOS) : true : _options$detachPrevio;\n        if (detachPreviousScreen === false) {\n          activeScreensLimit++;\n        } else {\n          if (i <= scenes.length - 2) {\n            break;\n          }\n        }\n      }\n      var floatingHeader = React.createElement(React.Fragment, {\n        key: \"header\"\n      }, renderHeader({\n        mode: 'float',\n        layout: layout,\n        scenes: scenes,\n        getPreviousScene: this.getPreviousScene,\n        getFocusedRoute: this.getFocusedRoute,\n        onContentHeightChange: this.handleHeaderLayout,\n        style: [styles.floating, isFloatHeaderAbsolute && [{\n          height: focusedHeaderHeight\n        }, styles.absolute]]\n      }));\n      return React.createElement(Background, null, isFloatHeaderAbsolute ? null : floatingHeader, React.createElement(MaybeScreenContainer, {\n        enabled: detachInactiveScreens,\n        style: styles.container,\n        onLayout: this.handleLayout\n      }, routes.map(function (route, index, self) {\n        var _scenes, _scenes2;\n        var focused = focusedRoute.key === route.key;\n        var gesture = gestures[route.key];\n        var scene = scenes[index];\n        var isScreenActive = 1;\n        if (index < self.length - activeScreensLimit - 1) {\n          isScreenActive = STATE_INACTIVE;\n        } else {\n          var sceneForActivity = scenes[self.length - 1];\n          var outputValue = index === self.length - 1 ? STATE_ON_TOP : index >= self.length - activeScreensLimit ? STATE_TRANSITIONING_OR_BELOW_TOP : STATE_INACTIVE;\n          isScreenActive = sceneForActivity ? sceneForActivity.progress.current.interpolate({\n            inputRange: [0, 1 - EPSILON, 1],\n            outputRange: [1, 1, outputValue],\n            extrapolate: 'clamp'\n          }) : STATE_TRANSITIONING_OR_BELOW_TOP;\n        }\n        var _scene$descriptor$opt2 = scene.descriptor.options,\n          _scene$descriptor$opt3 = _scene$descriptor$opt2.headerShown,\n          headerShown = _scene$descriptor$opt3 === void 0 ? true : _scene$descriptor$opt3,\n          headerTransparent = _scene$descriptor$opt2.headerTransparent,\n          headerStyle = _scene$descriptor$opt2.headerStyle,\n          headerTintColor = _scene$descriptor$opt2.headerTintColor,\n          freezeOnBlur = _scene$descriptor$opt2.freezeOnBlur;\n        var safeAreaInsetTop = insets.top;\n        var safeAreaInsetRight = insets.right;\n        var safeAreaInsetBottom = insets.bottom;\n        var safeAreaInsetLeft = insets.left;\n        var headerHeight = headerShown !== false ? headerHeights[route.key] : 0;\n        var headerDarkContent;\n        if (headerShown) {\n          if (typeof headerTintColor === 'string') {\n            headerDarkContent = Color(headerTintColor).isDark();\n          } else {\n            var flattenedHeaderStyle = StyleSheet.flatten(headerStyle);\n            if (flattenedHeaderStyle && 'backgroundColor' in flattenedHeaderStyle && typeof flattenedHeaderStyle.backgroundColor === 'string') {\n              headerDarkContent = !Color(flattenedHeaderStyle.backgroundColor).isDark();\n            }\n          }\n        }\n        var interpolationIndex = getInterpolationIndex(scenes, index);\n        var isModal = getIsModal(scene, interpolationIndex, isParentModal);\n        var isNextScreenTransparent = ((_scenes = scenes[index + 1]) === null || _scenes === void 0 ? void 0 : _scenes.descriptor.options.presentation) === 'transparentModal';\n        var detachCurrentScreen = ((_scenes2 = scenes[index + 1]) === null || _scenes2 === void 0 ? void 0 : _scenes2.descriptor.options.detachPreviousScreen) !== false;\n        return React.createElement(MaybeScreen, {\n          key: route.key,\n          style: StyleSheet.absoluteFill,\n          enabled: detachInactiveScreens,\n          active: isScreenActive,\n          freezeOnBlur: freezeOnBlur,\n          pointerEvents: \"box-none\"\n        }, React.createElement(CardContainer, {\n          index: index,\n          interpolationIndex: interpolationIndex,\n          modal: isModal,\n          active: index === self.length - 1,\n          focused: focused,\n          closing: closingRouteKeys.includes(route.key),\n          layout: layout,\n          gesture: gesture,\n          scene: scene,\n          safeAreaInsetTop: safeAreaInsetTop,\n          safeAreaInsetRight: safeAreaInsetRight,\n          safeAreaInsetBottom: safeAreaInsetBottom,\n          safeAreaInsetLeft: safeAreaInsetLeft,\n          onGestureStart: onGestureStart,\n          onGestureCancel: onGestureCancel,\n          onGestureEnd: onGestureEnd,\n          headerHeight: headerHeight,\n          isParentHeaderShown: isParentHeaderShown,\n          onHeaderHeightChange: _this2.handleHeaderLayout,\n          getPreviousScene: _this2.getPreviousScene,\n          getFocusedRoute: _this2.getFocusedRoute,\n          headerDarkContent: headerDarkContent,\n          hasAbsoluteFloatHeader: isFloatHeaderAbsolute && !headerTransparent,\n          renderHeader: renderHeader,\n          renderScene: renderScene,\n          onOpenRoute: onOpenRoute,\n          onCloseRoute: onCloseRoute,\n          onTransitionStart: onTransitionStart,\n          onTransitionEnd: onTransitionEnd,\n          isNextScreenTransparent: isNextScreenTransparent,\n          detachCurrentScreen: detachCurrentScreen\n        }));\n      })), isFloatHeaderAbsolute ? floatingHeader : null);\n    }\n  }], [{\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(props, state) {\n      if (props.routes === state.routes && props.descriptors === state.descriptors) {\n        return null;\n      }\n      var gestures = props.routes.reduce(function (acc, curr) {\n        var descriptor = props.descriptors[curr.key];\n        var _ref5 = (descriptor === null || descriptor === void 0 ? void 0 : descriptor.options) || {},\n          animationEnabled = _ref5.animationEnabled;\n        acc[curr.key] = state.gestures[curr.key] || new Animated.Value(props.openingRouteKeys.includes(curr.key) && animationEnabled !== false ? getDistanceFromOptions(state.layout, descriptor) : 0);\n        return acc;\n      }, {});\n      var scenes = props.routes.map(function (route, index, self) {\n        var _descriptor$options$h;\n        var previousRoute = self[index - 1];\n        var nextRoute = self[index + 1];\n        var oldScene = state.scenes[index];\n        var currentGesture = gestures[route.key];\n        var previousGesture = previousRoute ? gestures[previousRoute.key] : undefined;\n        var nextGesture = nextRoute ? gestures[nextRoute.key] : undefined;\n        var descriptor = props.descriptors[route.key] || state.descriptors[route.key] || (oldScene ? oldScene.descriptor : FALLBACK_DESCRIPTOR);\n        var nextDescriptor = props.descriptors[nextRoute === null || nextRoute === void 0 ? void 0 : nextRoute.key] || state.descriptors[nextRoute === null || nextRoute === void 0 ? void 0 : nextRoute.key];\n        var previousDescriptor = props.descriptors[previousRoute === null || previousRoute === void 0 ? void 0 : previousRoute.key] || state.descriptors[previousRoute === null || previousRoute === void 0 ? void 0 : previousRoute.key];\n        var optionsForTransitionConfig = index !== self.length - 1 && nextDescriptor && nextDescriptor.options.presentation !== 'transparentModal' ? nextDescriptor.options : descriptor.options;\n        var defaultTransitionPreset = optionsForTransitionConfig.presentation === 'modal' ? ModalTransition : optionsForTransitionConfig.presentation === 'transparentModal' ? ModalFadeTransition : DefaultTransition;\n        var _optionsForTransition = optionsForTransitionConfig.animationEnabled,\n          animationEnabled = _optionsForTransition === void 0 ? Platform.OS !== 'web' && Platform.OS !== 'windows' && Platform.OS !== 'macos' : _optionsForTransition,\n          _optionsForTransition2 = optionsForTransitionConfig.gestureEnabled,\n          gestureEnabled = _optionsForTransition2 === void 0 ? Platform.OS === 'ios' && animationEnabled : _optionsForTransition2,\n          _optionsForTransition3 = optionsForTransitionConfig.gestureDirection,\n          gestureDirection = _optionsForTransition3 === void 0 ? defaultTransitionPreset.gestureDirection : _optionsForTransition3,\n          _optionsForTransition4 = optionsForTransitionConfig.transitionSpec,\n          transitionSpec = _optionsForTransition4 === void 0 ? defaultTransitionPreset.transitionSpec : _optionsForTransition4,\n          _optionsForTransition5 = optionsForTransitionConfig.cardStyleInterpolator,\n          cardStyleInterpolator = _optionsForTransition5 === void 0 ? animationEnabled === false ? forNoAnimationCard : defaultTransitionPreset.cardStyleInterpolator : _optionsForTransition5,\n          _optionsForTransition6 = optionsForTransitionConfig.headerStyleInterpolator,\n          headerStyleInterpolator = _optionsForTransition6 === void 0 ? defaultTransitionPreset.headerStyleInterpolator : _optionsForTransition6,\n          _optionsForTransition7 = optionsForTransitionConfig.cardOverlayEnabled,\n          cardOverlayEnabled = _optionsForTransition7 === void 0 ? Platform.OS !== 'ios' && optionsForTransitionConfig.presentation !== 'transparentModal' || getIsModalPresentation(cardStyleInterpolator) : _optionsForTransition7;\n        var headerMode = (_descriptor$options$h = descriptor.options.headerMode) != null ? _descriptor$options$h : !(optionsForTransitionConfig.presentation === 'modal' || optionsForTransitionConfig.presentation === 'transparentModal' || (nextDescriptor === null || nextDescriptor === void 0 ? void 0 : nextDescriptor.options.presentation) === 'modal' || (nextDescriptor === null || nextDescriptor === void 0 ? void 0 : nextDescriptor.options.presentation) === 'transparentModal' || getIsModalPresentation(cardStyleInterpolator)) && Platform.OS === 'ios' && descriptor.options.header === undefined ? 'float' : 'screen';\n        var scene = {\n          route: route,\n          descriptor: _objectSpread(_objectSpread({}, descriptor), {}, {\n            options: _objectSpread(_objectSpread({}, descriptor.options), {}, {\n              animationEnabled: animationEnabled,\n              cardOverlayEnabled: cardOverlayEnabled,\n              cardStyleInterpolator: cardStyleInterpolator,\n              gestureDirection: gestureDirection,\n              gestureEnabled: gestureEnabled,\n              headerStyleInterpolator: headerStyleInterpolator,\n              transitionSpec: transitionSpec,\n              headerMode: headerMode\n            })\n          }),\n          progress: {\n            current: getProgressFromGesture(currentGesture, state.layout, descriptor),\n            next: nextGesture && (nextDescriptor === null || nextDescriptor === void 0 ? void 0 : nextDescriptor.options.presentation) !== 'transparentModal' ? getProgressFromGesture(nextGesture, state.layout, nextDescriptor) : undefined,\n            previous: previousGesture ? getProgressFromGesture(previousGesture, state.layout, previousDescriptor) : undefined\n          },\n          __memo: [state.layout, descriptor, nextDescriptor, previousDescriptor, currentGesture, nextGesture, previousGesture]\n        };\n        if (oldScene && scene.__memo.every(function (it, i) {\n          return oldScene.__memo[i] === it;\n        })) {\n          return oldScene;\n        }\n        return scene;\n      });\n      return {\n        routes: props.routes,\n        scenes: scenes,\n        gestures: gestures,\n        descriptors: props.descriptors,\n        headerHeights: getHeaderHeights(scenes, props.insets, props.isParentHeaderShown, props.isParentModal, state.layout, state.headerHeights)\n      };\n    }\n  }]);\n  return CardStack;\n}(React.Component);\nexport { CardStack as default };\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1\n  },\n  absolute: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    right: 0\n  },\n  floating: {\n    zIndex: 1\n  }\n});","map":{"version":3,"sources":["CardStack.tsx"],"names":["Background","getDefaultHeaderHeight","SafeAreaProviderCompat","Color","React","forModalPresentationIOS","forNoAnimation","forNoAnimationCard","DefaultTransition","ModalFadeTransition","ModalTransition","getDistanceForDirection","MaybeScreen","MaybeScreenContainer","getIsModalPresentation","CardContainer","EPSILON","STATE_INACTIVE","STATE_TRANSITIONING_OR_BELOW_TOP","STATE_ON_TOP","FALLBACK_DESCRIPTOR","Object","freeze","options","getInterpolationIndex","scenes","index","cardStyleInterpolator","descriptor","interpolationIndex","i","cardStyleInterpolatorCurrent","getIsModal","scene","isParentModal","isModalPresentation","isModal","getHeaderHeights","insets","isParentHeaderShown","layout","previous","reduce","acc","curr","headerStatusBarHeight","top","headerStyle","style","StyleSheet","flatten","height","route","key","getDistanceFromOptions","presentation","gestureDirection","getProgressFromGesture","gesture","distance","width","Math","max","interpolate","inputRange","outputRange","CardStack","Component","props","state","routes","descriptors","gestures","animationEnabled","Animated","Value","openingRouteKeys","includes","map","self","previousRoute","nextRoute","oldScene","currentGesture","previousGesture","undefined","nextGesture","nextDescriptor","previousDescriptor","optionsForTransitionConfig","length","defaultTransitionPreset","Platform","OS","gestureEnabled","transitionSpec","headerStyleInterpolator","cardOverlayEnabled","headerMode","header","progress","current","next","__memo","every","it","headerHeights","constructor","initialMetrics","frame","e","nativeEvent","setState","previousHeight","getPreviousRoute","previousScene","find","render","closingRouteKeys","onOpenRoute","onCloseRoute","renderHeader","renderScene","onTransitionStart","onTransitionEnd","onGestureStart","onGestureEnd","onGestureCancel","detachInactiveScreens","focusedRoute","focusedHeaderHeight","isFloatHeaderAbsolute","slice","some","headerTransparent","headerShown","activeScreensLimit","detachPreviousScreen","lastIndexOf","floatingHeader","mode","getPreviousScene","getFocusedRoute","onContentHeightChange","handleHeaderLayout","styles","floating","absolute","container","handleLayout","focused","isScreenActive","sceneForActivity","outputValue","extrapolate","headerTintColor","freezeOnBlur","safeAreaInsetTop","safeAreaInsetRight","right","safeAreaInsetBottom","bottom","safeAreaInsetLeft","left","headerHeight","headerDarkContent","isDark","flattenedHeaderStyle","backgroundColor","isNextScreenTransparent","detachCurrentScreen","absoluteFill","create","flex","position","zIndex"],"mappings":"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","sourceRoot":"../../src","sourcesContent":["function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return typeof key === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (typeof input !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (typeof res !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nimport { Background, getDefaultHeaderHeight, SafeAreaProviderCompat } from '@react-navigation/elements';\nimport Color from 'color';\nimport * as React from 'react';\nimport { Animated, Platform, StyleSheet } from 'react-native';\nimport { forModalPresentationIOS, forNoAnimation as forNoAnimationCard } from '../../TransitionConfigs/CardStyleInterpolators';\nimport { DefaultTransition, ModalFadeTransition, ModalTransition } from '../../TransitionConfigs/TransitionPresets';\nimport getDistanceForDirection from '../../utils/getDistanceForDirection';\nimport { MaybeScreen, MaybeScreenContainer } from '../Screens';\nimport { getIsModalPresentation } from './Card';\nimport CardContainer from './CardContainer';\nconst EPSILON = 1e-5;\nconst STATE_INACTIVE = 0;\nconst STATE_TRANSITIONING_OR_BELOW_TOP = 1;\nconst STATE_ON_TOP = 2;\nconst FALLBACK_DESCRIPTOR = Object.freeze({\n  options: {}\n});\nconst getInterpolationIndex = (scenes, index) => {\n  const {\n    cardStyleInterpolator\n  } = scenes[index].descriptor.options;\n\n  // Start from current card and count backwards the number of cards with same interpolation\n  let interpolationIndex = 0;\n  for (let i = index - 1; i >= 0; i--) {\n    var _scenes$i;\n    const cardStyleInterpolatorCurrent = (_scenes$i = scenes[i]) === null || _scenes$i === void 0 ? void 0 : _scenes$i.descriptor.options.cardStyleInterpolator;\n    if (cardStyleInterpolatorCurrent !== cardStyleInterpolator) {\n      break;\n    }\n    interpolationIndex++;\n  }\n  return interpolationIndex;\n};\nconst getIsModal = (scene, interpolationIndex, isParentModal) => {\n  if (isParentModal) {\n    return true;\n  }\n  const {\n    cardStyleInterpolator\n  } = scene.descriptor.options;\n  const isModalPresentation = getIsModalPresentation(cardStyleInterpolator);\n  const isModal = isModalPresentation && interpolationIndex !== 0;\n  return isModal;\n};\nconst getHeaderHeights = (scenes, insets, isParentHeaderShown, isParentModal, layout, previous) => {\n  return scenes.reduce((acc, curr, index) => {\n    const {\n      headerStatusBarHeight = isParentHeaderShown ? 0 : insets.top,\n      headerStyle\n    } = curr.descriptor.options;\n    const style = StyleSheet.flatten(headerStyle || {});\n    const height = 'height' in style && typeof style.height === 'number' ? style.height : previous[curr.route.key];\n    const interpolationIndex = getInterpolationIndex(scenes, index);\n    const isModal = getIsModal(curr, interpolationIndex, isParentModal);\n    acc[curr.route.key] = typeof height === 'number' ? height : getDefaultHeaderHeight(layout, isModal, headerStatusBarHeight);\n    return acc;\n  }, {});\n};\nconst getDistanceFromOptions = (layout, descriptor) => {\n  const {\n    presentation,\n    gestureDirection = presentation === 'modal' ? ModalTransition.gestureDirection : DefaultTransition.gestureDirection\n  } = (descriptor === null || descriptor === void 0 ? void 0 : descriptor.options) || {};\n  return getDistanceForDirection(layout, gestureDirection);\n};\nconst getProgressFromGesture = (gesture, layout, descriptor) => {\n  const distance = getDistanceFromOptions({\n    // Make sure that we have a non-zero distance, otherwise there will be incorrect progress\n    // This causes blank screen on web if it was previously inside container with display: none\n    width: Math.max(1, layout.width),\n    height: Math.max(1, layout.height)\n  }, descriptor);\n  if (distance > 0) {\n    return gesture.interpolate({\n      inputRange: [0, distance],\n      outputRange: [1, 0]\n    });\n  }\n  return gesture.interpolate({\n    inputRange: [distance, 0],\n    outputRange: [0, 1]\n  });\n};\nexport default class CardStack extends React.Component {\n  static getDerivedStateFromProps(props, state) {\n    if (props.routes === state.routes && props.descriptors === state.descriptors) {\n      return null;\n    }\n    const gestures = props.routes.reduce((acc, curr) => {\n      const descriptor = props.descriptors[curr.key];\n      const {\n        animationEnabled\n      } = (descriptor === null || descriptor === void 0 ? void 0 : descriptor.options) || {};\n      acc[curr.key] = state.gestures[curr.key] || new Animated.Value(props.openingRouteKeys.includes(curr.key) && animationEnabled !== false ? getDistanceFromOptions(state.layout, descriptor) : 0);\n      return acc;\n    }, {});\n    const scenes = props.routes.map((route, index, self) => {\n      const previousRoute = self[index - 1];\n      const nextRoute = self[index + 1];\n      const oldScene = state.scenes[index];\n      const currentGesture = gestures[route.key];\n      const previousGesture = previousRoute ? gestures[previousRoute.key] : undefined;\n      const nextGesture = nextRoute ? gestures[nextRoute.key] : undefined;\n      const descriptor = props.descriptors[route.key] || state.descriptors[route.key] || (oldScene ? oldScene.descriptor : FALLBACK_DESCRIPTOR);\n      const nextDescriptor = props.descriptors[nextRoute === null || nextRoute === void 0 ? void 0 : nextRoute.key] || state.descriptors[nextRoute === null || nextRoute === void 0 ? void 0 : nextRoute.key];\n      const previousDescriptor = props.descriptors[previousRoute === null || previousRoute === void 0 ? void 0 : previousRoute.key] || state.descriptors[previousRoute === null || previousRoute === void 0 ? void 0 : previousRoute.key];\n\n      // When a screen is not the last, it should use next screen's transition config\n      // Many transitions also animate the previous screen, so using 2 different transitions doesn't look right\n      // For example combining a slide and a modal transition would look wrong otherwise\n      // With this approach, combining different transition styles in the same navigator mostly looks right\n      // This will still be broken when 2 transitions have different idle state (e.g. modal presentation),\n      // but majority of the transitions look alright\n      const optionsForTransitionConfig = index !== self.length - 1 && nextDescriptor && nextDescriptor.options.presentation !== 'transparentModal' ? nextDescriptor.options : descriptor.options;\n      let defaultTransitionPreset = optionsForTransitionConfig.presentation === 'modal' ? ModalTransition : optionsForTransitionConfig.presentation === 'transparentModal' ? ModalFadeTransition : DefaultTransition;\n      const {\n        animationEnabled = Platform.OS !== 'web' && Platform.OS !== 'windows' && Platform.OS !== 'macos',\n        gestureEnabled = Platform.OS === 'ios' && animationEnabled,\n        gestureDirection = defaultTransitionPreset.gestureDirection,\n        transitionSpec = defaultTransitionPreset.transitionSpec,\n        cardStyleInterpolator = animationEnabled === false ? forNoAnimationCard : defaultTransitionPreset.cardStyleInterpolator,\n        headerStyleInterpolator = defaultTransitionPreset.headerStyleInterpolator,\n        cardOverlayEnabled = Platform.OS !== 'ios' && optionsForTransitionConfig.presentation !== 'transparentModal' || getIsModalPresentation(cardStyleInterpolator)\n      } = optionsForTransitionConfig;\n      const headerMode = descriptor.options.headerMode ?? (!(optionsForTransitionConfig.presentation === 'modal' || optionsForTransitionConfig.presentation === 'transparentModal' || (nextDescriptor === null || nextDescriptor === void 0 ? void 0 : nextDescriptor.options.presentation) === 'modal' || (nextDescriptor === null || nextDescriptor === void 0 ? void 0 : nextDescriptor.options.presentation) === 'transparentModal' || getIsModalPresentation(cardStyleInterpolator)) && Platform.OS === 'ios' && descriptor.options.header === undefined ? 'float' : 'screen');\n      const scene = {\n        route,\n        descriptor: {\n          ...descriptor,\n          options: {\n            ...descriptor.options,\n            animationEnabled,\n            cardOverlayEnabled,\n            cardStyleInterpolator,\n            gestureDirection,\n            gestureEnabled,\n            headerStyleInterpolator,\n            transitionSpec,\n            headerMode\n          }\n        },\n        progress: {\n          current: getProgressFromGesture(currentGesture, state.layout, descriptor),\n          next: nextGesture && (nextDescriptor === null || nextDescriptor === void 0 ? void 0 : nextDescriptor.options.presentation) !== 'transparentModal' ? getProgressFromGesture(nextGesture, state.layout, nextDescriptor) : undefined,\n          previous: previousGesture ? getProgressFromGesture(previousGesture, state.layout, previousDescriptor) : undefined\n        },\n        __memo: [state.layout, descriptor, nextDescriptor, previousDescriptor, currentGesture, nextGesture, previousGesture]\n      };\n      if (oldScene && scene.__memo.every((it, i) => {\n        // @ts-expect-error: we haven't added __memo to the annotation to prevent usage elsewhere\n        return oldScene.__memo[i] === it;\n      })) {\n        return oldScene;\n      }\n      return scene;\n    });\n    return {\n      routes: props.routes,\n      scenes,\n      gestures,\n      descriptors: props.descriptors,\n      headerHeights: getHeaderHeights(scenes, props.insets, props.isParentHeaderShown, props.isParentModal, state.layout, state.headerHeights)\n    };\n  }\n  constructor(_props) {\n    super(_props);\n    _defineProperty(this, \"handleLayout\", e => {\n      const {\n        height,\n        width\n      } = e.nativeEvent.layout;\n      const layout = {\n        width,\n        height\n      };\n      this.setState((state, props) => {\n        if (height === state.layout.height && width === state.layout.width) {\n          return null;\n        }\n        return {\n          layout,\n          headerHeights: getHeaderHeights(state.scenes, props.insets, props.isParentHeaderShown, props.isParentModal, layout, state.headerHeights)\n        };\n      });\n    });\n    _defineProperty(this, \"handleHeaderLayout\", _ref => {\n      let {\n        route,\n        height\n      } = _ref;\n      this.setState(_ref2 => {\n        let {\n          headerHeights\n        } = _ref2;\n        const previousHeight = headerHeights[route.key];\n        if (previousHeight === height) {\n          return null;\n        }\n        return {\n          headerHeights: {\n            ...headerHeights,\n            [route.key]: height\n          }\n        };\n      });\n    });\n    _defineProperty(this, \"getFocusedRoute\", () => {\n      const {\n        state\n      } = this.props;\n      return state.routes[state.index];\n    });\n    _defineProperty(this, \"getPreviousScene\", _ref3 => {\n      let {\n        route\n      } = _ref3;\n      const {\n        getPreviousRoute\n      } = this.props;\n      const {\n        scenes\n      } = this.state;\n      const previousRoute = getPreviousRoute({\n        route\n      });\n      if (previousRoute) {\n        const previousScene = scenes.find(scene => scene.descriptor.route.key === previousRoute.key);\n        return previousScene;\n      }\n      return undefined;\n    });\n    this.state = {\n      routes: [],\n      scenes: [],\n      gestures: {},\n      layout: SafeAreaProviderCompat.initialMetrics.frame,\n      descriptors: this.props.descriptors,\n      // Used when card's header is null and mode is float to make transition\n      // between screens with headers and those without headers smooth.\n      // This is not a great heuristic here. We don't know synchronously\n      // on mount what the header height is so we have just used the most\n      // common cases here.\n      headerHeights: {}\n    };\n  }\n  render() {\n    const {\n      insets,\n      state,\n      routes,\n      closingRouteKeys,\n      onOpenRoute,\n      onCloseRoute,\n      renderHeader,\n      renderScene,\n      isParentHeaderShown,\n      isParentModal,\n      onTransitionStart,\n      onTransitionEnd,\n      onGestureStart,\n      onGestureEnd,\n      onGestureCancel,\n      detachInactiveScreens = Platform.OS === 'web' || Platform.OS === 'android' || Platform.OS === 'ios'\n    } = this.props;\n    const {\n      scenes,\n      layout,\n      gestures,\n      headerHeights\n    } = this.state;\n    const focusedRoute = state.routes[state.index];\n    const focusedHeaderHeight = headerHeights[focusedRoute.key];\n    const isFloatHeaderAbsolute = this.state.scenes.slice(-2).some(scene => {\n      const options = scene.descriptor.options ?? {};\n      const {\n        headerMode,\n        headerTransparent,\n        headerShown = true\n      } = options;\n      if (headerTransparent || headerShown === false || headerMode === 'screen') {\n        return true;\n      }\n      return false;\n    });\n    let activeScreensLimit = 1;\n    for (let i = scenes.length - 1; i >= 0; i--) {\n      const {\n        options\n      } = scenes[i].descriptor;\n      const {\n        // By default, we don't want to detach the previous screen of the active one for modals\n        detachPreviousScreen = options.presentation === 'transparentModal' ? false : getIsModalPresentation(options.cardStyleInterpolator) ? i !== scenes.map(scene => scene.descriptor.options.cardStyleInterpolator).lastIndexOf(forModalPresentationIOS) : true\n      } = options;\n      if (detachPreviousScreen === false) {\n        activeScreensLimit++;\n      } else {\n        // Check at least last 2 screens before stopping\n        // This will make sure that screen isn't detached when another screen is animating on top of the transparent one\n        // For example, (Opaque -> Transparent -> Opaque)\n        if (i <= scenes.length - 2) {\n          break;\n        }\n      }\n    }\n    const floatingHeader = /*#__PURE__*/React.createElement(React.Fragment, {\n      key: \"header\"\n    }, renderHeader({\n      mode: 'float',\n      layout,\n      scenes,\n      getPreviousScene: this.getPreviousScene,\n      getFocusedRoute: this.getFocusedRoute,\n      onContentHeightChange: this.handleHeaderLayout,\n      style: [styles.floating, isFloatHeaderAbsolute && [\n      // Without this, the header buttons won't be touchable on Android when headerTransparent: true\n      {\n        height: focusedHeaderHeight\n      }, styles.absolute]]\n    }));\n    return /*#__PURE__*/React.createElement(Background, null, isFloatHeaderAbsolute ? null : floatingHeader, /*#__PURE__*/React.createElement(MaybeScreenContainer, {\n      enabled: detachInactiveScreens,\n      style: styles.container,\n      onLayout: this.handleLayout\n    }, routes.map((route, index, self) => {\n      var _scenes, _scenes2;\n      const focused = focusedRoute.key === route.key;\n      const gesture = gestures[route.key];\n      const scene = scenes[index];\n\n      // For the screens that shouldn't be active, the value is 0\n      // For those that should be active, but are not the top screen, the value is 1\n      // For those on top of the stack and with interaction enabled, the value is 2\n      // For the old implementation, it stays the same it was\n      let isScreenActive = 1;\n      if (index < self.length - activeScreensLimit - 1) {\n        // screen should be inactive because it is too deep in the stack\n        isScreenActive = STATE_INACTIVE;\n      } else {\n        const sceneForActivity = scenes[self.length - 1];\n        const outputValue = index === self.length - 1 ? STATE_ON_TOP // the screen is on top after the transition\n        : index >= self.length - activeScreensLimit ? STATE_TRANSITIONING_OR_BELOW_TOP // the screen should stay active after the transition, it is not on top but is in activeLimit\n        : STATE_INACTIVE; // the screen should be active only during the transition, it is at the edge of activeLimit\n        isScreenActive = sceneForActivity ? sceneForActivity.progress.current.interpolate({\n          inputRange: [0, 1 - EPSILON, 1],\n          outputRange: [1, 1, outputValue],\n          extrapolate: 'clamp'\n        }) : STATE_TRANSITIONING_OR_BELOW_TOP;\n      }\n      const {\n        headerShown = true,\n        headerTransparent,\n        headerStyle,\n        headerTintColor,\n        freezeOnBlur\n      } = scene.descriptor.options;\n      const safeAreaInsetTop = insets.top;\n      const safeAreaInsetRight = insets.right;\n      const safeAreaInsetBottom = insets.bottom;\n      const safeAreaInsetLeft = insets.left;\n      const headerHeight = headerShown !== false ? headerHeights[route.key] : 0;\n      let headerDarkContent;\n      if (headerShown) {\n        if (typeof headerTintColor === 'string') {\n          headerDarkContent = Color(headerTintColor).isDark();\n        } else {\n          const flattenedHeaderStyle = StyleSheet.flatten(headerStyle);\n          if (flattenedHeaderStyle && 'backgroundColor' in flattenedHeaderStyle && typeof flattenedHeaderStyle.backgroundColor === 'string') {\n            headerDarkContent = !Color(flattenedHeaderStyle.backgroundColor).isDark();\n          }\n        }\n      }\n\n      // Start from current card and count backwards the number of cards with same interpolation\n      const interpolationIndex = getInterpolationIndex(scenes, index);\n      const isModal = getIsModal(scene, interpolationIndex, isParentModal);\n      const isNextScreenTransparent = ((_scenes = scenes[index + 1]) === null || _scenes === void 0 ? void 0 : _scenes.descriptor.options.presentation) === 'transparentModal';\n      const detachCurrentScreen = ((_scenes2 = scenes[index + 1]) === null || _scenes2 === void 0 ? void 0 : _scenes2.descriptor.options.detachPreviousScreen) !== false;\n      return /*#__PURE__*/React.createElement(MaybeScreen, {\n        key: route.key,\n        style: StyleSheet.absoluteFill,\n        enabled: detachInactiveScreens,\n        active: isScreenActive,\n        freezeOnBlur: freezeOnBlur,\n        pointerEvents: \"box-none\"\n      }, /*#__PURE__*/React.createElement(CardContainer, {\n        index: index,\n        interpolationIndex: interpolationIndex,\n        modal: isModal,\n        active: index === self.length - 1,\n        focused: focused,\n        closing: closingRouteKeys.includes(route.key),\n        layout: layout,\n        gesture: gesture,\n        scene: scene,\n        safeAreaInsetTop: safeAreaInsetTop,\n        safeAreaInsetRight: safeAreaInsetRight,\n        safeAreaInsetBottom: safeAreaInsetBottom,\n        safeAreaInsetLeft: safeAreaInsetLeft,\n        onGestureStart: onGestureStart,\n        onGestureCancel: onGestureCancel,\n        onGestureEnd: onGestureEnd,\n        headerHeight: headerHeight,\n        isParentHeaderShown: isParentHeaderShown,\n        onHeaderHeightChange: this.handleHeaderLayout,\n        getPreviousScene: this.getPreviousScene,\n        getFocusedRoute: this.getFocusedRoute,\n        headerDarkContent: headerDarkContent,\n        hasAbsoluteFloatHeader: isFloatHeaderAbsolute && !headerTransparent,\n        renderHeader: renderHeader,\n        renderScene: renderScene,\n        onOpenRoute: onOpenRoute,\n        onCloseRoute: onCloseRoute,\n        onTransitionStart: onTransitionStart,\n        onTransitionEnd: onTransitionEnd,\n        isNextScreenTransparent: isNextScreenTransparent,\n        detachCurrentScreen: detachCurrentScreen\n      }));\n    })), isFloatHeaderAbsolute ? floatingHeader : null);\n  }\n}\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1\n  },\n  absolute: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    right: 0\n  },\n  floating: {\n    zIndex: 1\n  }\n});\n//# sourceMappingURL=CardStack.js.map"]},"metadata":{},"sourceType":"module"}