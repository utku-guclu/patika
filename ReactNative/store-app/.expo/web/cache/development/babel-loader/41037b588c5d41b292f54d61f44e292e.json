{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { useEffect, useState } from \"react\";\nimport { Provider } from \"react-redux\";\nimport reducers from \"./reducers\";\nimport { configureStore } from \"@reduxjs/toolkit\";\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nvar AuthProvider = function AuthProvider(_ref) {\n  var children = _ref.children;\n  var _useState = useState(null),\n    _useState2 = _slicedToArray(_useState, 2),\n    user = _useState2[0],\n    setUser = _useState2[1];\n  var _useState3 = useState(false),\n    _useState4 = _slicedToArray(_useState3, 2),\n    isAuthLoading = _useState4[0],\n    setIsAuthLoading = _useState4[1];\n  useEffect(function () {\n    AsyncStorage.getItem(\"@user\").then(function (userSession) {\n      if (userSession) {\n        try {\n          setIsAuthLoading(true);\n          setUser(JSON.parse(userSession));\n        } catch (error) {\n          console.log(error);\n        } finally {\n          setIsAuthLoading(false);\n        }\n      }\n    });\n  }, []);\n  var reducer = reducers;\n  var preloadedState = {\n    user: user,\n    isAuthLoading: isAuthLoading\n  };\n  var store = configureStore({\n    reducer: reducer,\n    preloadedState: preloadedState\n  });\n  return _jsx(Provider, {\n    store: store,\n    children: children\n  });\n};\nexport default AuthProvider;","map":{"version":3,"names":["useEffect","useState","Provider","reducers","configureStore","AsyncStorage","AuthProvider","children","user","setUser","isAuthLoading","setIsAuthLoading","getItem","then","userSession","JSON","parse","error","console","log","reducer","preloadedState","store"],"sources":["/home/utku/Desktop/patika/ReactNative/kodwork/src/context/AuthProvider/AuthProvider.js"],"sourcesContent":["import { useEffect, useState } from \"react\";\n\nimport { Provider } from \"react-redux\";\nimport reducers from \"./reducers\";\nimport { configureStore } from \"@reduxjs/toolkit\";\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\n\nconst AuthProvider = ({ children }) => {\n  const [user, setUser] = useState(null);\n  const [isAuthLoading, setIsAuthLoading] = useState(false);\n\n  useEffect(() => {\n    // promise => .then\n    AsyncStorage.getItem(\"@user\").then((userSession) => {\n      // console.log(userSession);\n      if (userSession) {\n        try {\n          setIsAuthLoading(true);\n          setUser(JSON.parse(userSession));\n        } catch (error) {\n          console.log(error);\n        } finally {\n          setIsAuthLoading(false);\n        }\n      }\n    });\n  }, []);\n\n  const reducer = reducers;\n  const preloadedState = {\n    user,\n    isAuthLoading,\n  };\n\n  const store = configureStore({\n    reducer,\n    preloadedState,\n  });\n  return <Provider store={store}>{children}</Provider>;\n};\n\nexport default AuthProvider;\n"],"mappings":";AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAE3C,SAASC,QAAQ,QAAQ,aAAa;AACtC,OAAOC,QAAQ;AACf,SAASC,cAAc,QAAQ,kBAAkB;AACjD,OAAOC,YAAY,MAAM,2CAA2C;AAAC;AAErE,IAAMC,YAAY,GAAG,SAAfA,YAAY,OAAqB;EAAA,IAAfC,QAAQ,QAARA,QAAQ;EAC9B,gBAAwBN,QAAQ,CAAC,IAAI,CAAC;IAAA;IAA/BO,IAAI;IAAEC,OAAO;EACpB,iBAA0CR,QAAQ,CAAC,KAAK,CAAC;IAAA;IAAlDS,aAAa;IAAEC,gBAAgB;EAEtCX,SAAS,CAAC,YAAM;IAEdK,YAAY,CAACO,OAAO,CAAC,OAAO,CAAC,CAACC,IAAI,CAAC,UAACC,WAAW,EAAK;MAElD,IAAIA,WAAW,EAAE;QACf,IAAI;UACFH,gBAAgB,CAAC,IAAI,CAAC;UACtBF,OAAO,CAACM,IAAI,CAACC,KAAK,CAACF,WAAW,CAAC,CAAC;QAClC,CAAC,CAAC,OAAOG,KAAK,EAAE;UACdC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC;QACpB,CAAC,SAAS;UACRN,gBAAgB,CAAC,KAAK,CAAC;QACzB;MACF;IACF,CAAC,CAAC;EACJ,CAAC,EAAE,EAAE,CAAC;EAEN,IAAMS,OAAO,GAAGjB,QAAQ;EACxB,IAAMkB,cAAc,GAAG;IACrBb,IAAI,EAAJA,IAAI;IACJE,aAAa,EAAbA;EACF,CAAC;EAED,IAAMY,KAAK,GAAGlB,cAAc,CAAC;IAC3BgB,OAAO,EAAPA,OAAO;IACPC,cAAc,EAAdA;EACF,CAAC,CAAC;EACF,OAAO,KAAC,QAAQ;IAAC,KAAK,EAAEC,KAAM;IAAA,UAAEf;EAAQ,EAAY;AACtD,CAAC;AAED,eAAeD,YAAY"},"metadata":{},"sourceType":"module"}