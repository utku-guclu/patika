{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _defineProperty2 from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _excluded = [\"state\", \"descriptors\"];\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty2(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction _defineProperty(obj, key, value) {\n  key = _toPropertyKey(key);\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nfunction _toPropertyKey(arg) {\n  var key = _toPrimitive(arg, \"string\");\n  return typeof key === \"symbol\" ? key : String(key);\n}\nfunction _toPrimitive(input, hint) {\n  if (typeof input !== \"object\" || input === null) return input;\n  var prim = input[Symbol.toPrimitive];\n  if (prim !== undefined) {\n    var res = prim.call(input, hint || \"default\");\n    if (typeof res !== \"object\") return res;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (hint === \"string\" ? String : Number)(input);\n}\nimport { HeaderShownContext, SafeAreaProviderCompat } from '@react-navigation/elements';\nimport { StackActions } from '@react-navigation/native';\nimport * as React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { SafeAreaInsetsContext } from 'react-native-safe-area-context';\nimport ModalPresentationContext from \"../../utils/ModalPresentationContext\";\nimport { GestureHandlerRootView } from \"../GestureHandler\";\nimport HeaderContainer from \"../Header/HeaderContainer\";\nimport CardStack from \"./CardStack\";\nvar GestureHandlerWrapper = GestureHandlerRootView != null ? GestureHandlerRootView : View;\nvar isArrayEqual = function isArrayEqual(a, b) {\n  return a.length === b.length && a.every(function (it, index) {\n    return it === b[index];\n  });\n};\nvar StackView = function (_React$Component) {\n  _inherits(StackView, _React$Component);\n  var _super = _createSuper(StackView);\n  function StackView() {\n    var _this;\n    _classCallCheck(this, StackView);\n    _this = _super.apply(this, arguments);\n    _defineProperty(_assertThisInitialized(_this), \"state\", {\n      routes: [],\n      previousRoutes: [],\n      previousDescriptors: {},\n      openingRouteKeys: [],\n      closingRouteKeys: [],\n      replacingRouteKeys: [],\n      descriptors: {}\n    });\n    _defineProperty(_assertThisInitialized(_this), \"getPreviousRoute\", function (_ref) {\n      var route = _ref.route;\n      var _this$state = _this.state,\n        closingRouteKeys = _this$state.closingRouteKeys,\n        replacingRouteKeys = _this$state.replacingRouteKeys;\n      var routes = _this.state.routes.filter(function (r) {\n        return r.key === route.key || !closingRouteKeys.includes(r.key) && !replacingRouteKeys.includes(r.key);\n      });\n      var index = routes.findIndex(function (r) {\n        return r.key === route.key;\n      });\n      return routes[index - 1];\n    });\n    _defineProperty(_assertThisInitialized(_this), \"renderScene\", function (_ref2) {\n      var route = _ref2.route;\n      var descriptor = _this.state.descriptors[route.key] || _this.props.descriptors[route.key];\n      if (!descriptor) {\n        return null;\n      }\n      return descriptor.render();\n    });\n    _defineProperty(_assertThisInitialized(_this), \"renderHeader\", function (props) {\n      return React.createElement(HeaderContainer, props);\n    });\n    _defineProperty(_assertThisInitialized(_this), \"handleOpenRoute\", function (_ref3) {\n      var route = _ref3.route;\n      var _this$props = _this.props,\n        state = _this$props.state,\n        navigation = _this$props.navigation;\n      var _this$state2 = _this.state,\n        closingRouteKeys = _this$state2.closingRouteKeys,\n        replacingRouteKeys = _this$state2.replacingRouteKeys;\n      if (closingRouteKeys.some(function (key) {\n        return key === route.key;\n      }) && replacingRouteKeys.every(function (key) {\n        return key !== route.key;\n      }) && state.routeNames.includes(route.name) && !state.routes.some(function (r) {\n        return r.key === route.key;\n      })) {\n        navigation.navigate(route);\n      } else {\n        _this.setState(function (state) {\n          return {\n            routes: state.replacingRouteKeys.length ? state.routes.filter(function (r) {\n              return !state.replacingRouteKeys.includes(r.key);\n            }) : state.routes,\n            openingRouteKeys: state.openingRouteKeys.filter(function (key) {\n              return key !== route.key;\n            }),\n            closingRouteKeys: state.closingRouteKeys.filter(function (key) {\n              return key !== route.key;\n            }),\n            replacingRouteKeys: []\n          };\n        });\n      }\n    });\n    _defineProperty(_assertThisInitialized(_this), \"handleCloseRoute\", function (_ref4) {\n      var route = _ref4.route;\n      var _this$props2 = _this.props,\n        state = _this$props2.state,\n        navigation = _this$props2.navigation;\n      if (state.routes.some(function (r) {\n        return r.key === route.key;\n      })) {\n        navigation.dispatch(_objectSpread(_objectSpread({}, StackActions.pop()), {}, {\n          source: route.key,\n          target: state.key\n        }));\n      } else {\n        _this.setState(function (state) {\n          return {\n            routes: state.routes.filter(function (r) {\n              return r.key !== route.key;\n            }),\n            openingRouteKeys: state.openingRouteKeys.filter(function (key) {\n              return key !== route.key;\n            }),\n            closingRouteKeys: state.closingRouteKeys.filter(function (key) {\n              return key !== route.key;\n            })\n          };\n        });\n      }\n    });\n    _defineProperty(_assertThisInitialized(_this), \"handleTransitionStart\", function (_ref5, closing) {\n      var route = _ref5.route;\n      return _this.props.navigation.emit({\n        type: 'transitionStart',\n        data: {\n          closing: closing\n        },\n        target: route.key\n      });\n    });\n    _defineProperty(_assertThisInitialized(_this), \"handleTransitionEnd\", function (_ref6, closing) {\n      var route = _ref6.route;\n      return _this.props.navigation.emit({\n        type: 'transitionEnd',\n        data: {\n          closing: closing\n        },\n        target: route.key\n      });\n    });\n    _defineProperty(_assertThisInitialized(_this), \"handleGestureStart\", function (_ref7) {\n      var route = _ref7.route;\n      _this.props.navigation.emit({\n        type: 'gestureStart',\n        target: route.key\n      });\n    });\n    _defineProperty(_assertThisInitialized(_this), \"handleGestureEnd\", function (_ref8) {\n      var route = _ref8.route;\n      _this.props.navigation.emit({\n        type: 'gestureEnd',\n        target: route.key\n      });\n    });\n    _defineProperty(_assertThisInitialized(_this), \"handleGestureCancel\", function (_ref9) {\n      var route = _ref9.route;\n      _this.props.navigation.emit({\n        type: 'gestureCancel',\n        target: route.key\n      });\n    });\n    return _this;\n  }\n  _createClass(StackView, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n      var _this$props3 = this.props,\n        state = _this$props3.state,\n        _ = _this$props3.descriptors,\n        rest = _objectWithoutProperties(_this$props3, _excluded);\n      var _this$state3 = this.state,\n        routes = _this$state3.routes,\n        descriptors = _this$state3.descriptors,\n        openingRouteKeys = _this$state3.openingRouteKeys,\n        closingRouteKeys = _this$state3.closingRouteKeys;\n      return React.createElement(GestureHandlerWrapper, {\n        style: styles.container\n      }, React.createElement(SafeAreaProviderCompat, null, React.createElement(SafeAreaInsetsContext.Consumer, null, function (insets) {\n        return React.createElement(ModalPresentationContext.Consumer, null, function (isParentModal) {\n          return React.createElement(HeaderShownContext.Consumer, null, function (isParentHeaderShown) {\n            return React.createElement(CardStack, _extends({\n              insets: insets,\n              isParentHeaderShown: isParentHeaderShown,\n              isParentModal: isParentModal,\n              getPreviousRoute: _this2.getPreviousRoute,\n              routes: routes,\n              openingRouteKeys: openingRouteKeys,\n              closingRouteKeys: closingRouteKeys,\n              onOpenRoute: _this2.handleOpenRoute,\n              onCloseRoute: _this2.handleCloseRoute,\n              onTransitionStart: _this2.handleTransitionStart,\n              onTransitionEnd: _this2.handleTransitionEnd,\n              renderHeader: _this2.renderHeader,\n              renderScene: _this2.renderScene,\n              state: state,\n              descriptors: descriptors,\n              onGestureStart: _this2.handleGestureStart,\n              onGestureEnd: _this2.handleGestureEnd,\n              onGestureCancel: _this2.handleGestureCancel\n            }, rest));\n          });\n        });\n      })));\n    }\n  }], [{\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(props, state) {\n      if ((props.state.routes === state.previousRoutes || isArrayEqual(props.state.routes.map(function (r) {\n        return r.key;\n      }), state.previousRoutes.map(function (r) {\n        return r.key;\n      }))) && state.routes.length) {\n        var _routes = state.routes;\n        var _previousRoutes = state.previousRoutes;\n        var _descriptors = props.descriptors;\n        var previousDescriptors = state.previousDescriptors;\n        if (props.descriptors !== state.previousDescriptors) {\n          _descriptors = state.routes.reduce(function (acc, route) {\n            acc[route.key] = props.descriptors[route.key] || state.descriptors[route.key];\n            return acc;\n          }, {});\n          previousDescriptors = props.descriptors;\n        }\n        if (props.state.routes !== state.previousRoutes) {\n          var map = props.state.routes.reduce(function (acc, route) {\n            acc[route.key] = route;\n            return acc;\n          }, {});\n          _routes = state.routes.map(function (route) {\n            return map[route.key] || route;\n          });\n          _previousRoutes = props.state.routes;\n        }\n        return {\n          routes: _routes,\n          previousRoutes: _previousRoutes,\n          descriptors: _descriptors,\n          previousDescriptors: previousDescriptors\n        };\n      }\n      var routes = props.state.index < props.state.routes.length - 1 ? props.state.routes.slice(0, props.state.index + 1) : props.state.routes;\n      var openingRouteKeys = state.openingRouteKeys,\n        closingRouteKeys = state.closingRouteKeys,\n        replacingRouteKeys = state.replacingRouteKeys,\n        previousRoutes = state.previousRoutes;\n      var previousFocusedRoute = previousRoutes[previousRoutes.length - 1];\n      var nextFocusedRoute = routes[routes.length - 1];\n      var isAnimationEnabled = function isAnimationEnabled(key) {\n        var descriptor = props.descriptors[key] || state.descriptors[key];\n        return descriptor ? descriptor.options.animationEnabled !== false : true;\n      };\n      var getAnimationTypeForReplace = function getAnimationTypeForReplace(key) {\n        var _descriptor$options$a;\n        var descriptor = props.descriptors[key] || state.descriptors[key];\n        return (_descriptor$options$a = descriptor.options.animationTypeForReplace) != null ? _descriptor$options$a : 'push';\n      };\n      if (previousFocusedRoute && previousFocusedRoute.key !== nextFocusedRoute.key) {\n        if (!previousRoutes.some(function (r) {\n          return r.key === nextFocusedRoute.key;\n        })) {\n          if (isAnimationEnabled(nextFocusedRoute.key) && !openingRouteKeys.includes(nextFocusedRoute.key)) {\n            openingRouteKeys = [].concat(_toConsumableArray(openingRouteKeys), [nextFocusedRoute.key]);\n            closingRouteKeys = closingRouteKeys.filter(function (key) {\n              return key !== nextFocusedRoute.key;\n            });\n            replacingRouteKeys = replacingRouteKeys.filter(function (key) {\n              return key !== nextFocusedRoute.key;\n            });\n            if (!routes.some(function (r) {\n              return r.key === previousFocusedRoute.key;\n            })) {\n              openingRouteKeys = openingRouteKeys.filter(function (key) {\n                return key !== previousFocusedRoute.key;\n              });\n              if (getAnimationTypeForReplace(nextFocusedRoute.key) === 'pop') {\n                closingRouteKeys = [].concat(_toConsumableArray(closingRouteKeys), [previousFocusedRoute.key]);\n                openingRouteKeys = openingRouteKeys.filter(function (key) {\n                  return key !== nextFocusedRoute.key;\n                });\n                routes = [].concat(_toConsumableArray(routes), [previousFocusedRoute]);\n              } else {\n                replacingRouteKeys = [].concat(_toConsumableArray(replacingRouteKeys), [previousFocusedRoute.key]);\n                closingRouteKeys = closingRouteKeys.filter(function (key) {\n                  return key !== previousFocusedRoute.key;\n                });\n                routes = routes.slice();\n                routes.splice(routes.length - 1, 0, previousFocusedRoute);\n              }\n            }\n          }\n        } else if (!routes.some(function (r) {\n          return r.key === previousFocusedRoute.key;\n        })) {\n          if (isAnimationEnabled(previousFocusedRoute.key) && !closingRouteKeys.includes(previousFocusedRoute.key)) {\n            closingRouteKeys = [].concat(_toConsumableArray(closingRouteKeys), [previousFocusedRoute.key]);\n            openingRouteKeys = openingRouteKeys.filter(function (key) {\n              return key !== previousFocusedRoute.key;\n            });\n            replacingRouteKeys = replacingRouteKeys.filter(function (key) {\n              return key !== previousFocusedRoute.key;\n            });\n            routes = [].concat(_toConsumableArray(routes), [previousFocusedRoute]);\n          }\n        } else {}\n      } else if (replacingRouteKeys.length || closingRouteKeys.length) {\n        var _routes2;\n        routes = routes.slice();\n        (_routes2 = routes).splice.apply(_routes2, [routes.length - 1, 0].concat(_toConsumableArray(state.routes.filter(function (_ref10) {\n          var key = _ref10.key;\n          return isAnimationEnabled(key) ? replacingRouteKeys.includes(key) || closingRouteKeys.includes(key) : false;\n        }))));\n      }\n      if (!routes.length) {\n        throw new Error('There should always be at least one route in the navigation state.');\n      }\n      var descriptors = routes.reduce(function (acc, route) {\n        acc[route.key] = props.descriptors[route.key] || state.descriptors[route.key];\n        return acc;\n      }, {});\n      return {\n        routes: routes,\n        previousRoutes: props.state.routes,\n        previousDescriptors: props.descriptors,\n        openingRouteKeys: openingRouteKeys,\n        closingRouteKeys: closingRouteKeys,\n        replacingRouteKeys: replacingRouteKeys,\n        descriptors: descriptors\n      };\n    }\n  }]);\n  return StackView;\n}(React.Component);\nexport { StackView as default };\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1\n  }\n});","map":{"version":3,"sources":["StackView.tsx"],"names":["HeaderShownContext","SafeAreaProviderCompat","StackActions","React","SafeAreaInsetsContext","ModalPresentationContext","GestureHandlerRootView","HeaderContainer","CardStack","GestureHandlerWrapper","View","isArrayEqual","a","b","length","every","it","index","StackView","Component","props","state","routes","previousRoutes","map","r","key","descriptors","previousDescriptors","reduce","acc","route","slice","openingRouteKeys","closingRouteKeys","replacingRouteKeys","previousFocusedRoute","nextFocusedRoute","isAnimationEnabled","descriptor","options","animationEnabled","getAnimationTypeForReplace","animationTypeForReplace","some","includes","filter","splice","Error","findIndex","render","navigation","routeNames","name","navigate","setState","dispatch","pop","source","target","closing","emit","type","data","_","rest","styles","container","insets","isParentModal","isParentHeaderShown","getPreviousRoute","handleOpenRoute","handleCloseRoute","handleTransitionStart","handleTransitionEnd","renderHeader","renderScene","handleGestureStart","handleGestureEnd","handleGestureCancel","StyleSheet","create","flex"],"mappings":"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","sourceRoot":"../../src","sourcesContent":["function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return typeof key === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (typeof input !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (typeof res !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\nimport { HeaderShownContext, SafeAreaProviderCompat } from '@react-navigation/elements';\nimport { StackActions } from '@react-navigation/native';\nimport * as React from 'react';\nimport { StyleSheet, View } from 'react-native';\nimport { SafeAreaInsetsContext } from 'react-native-safe-area-context';\nimport ModalPresentationContext from '../../utils/ModalPresentationContext';\nimport { GestureHandlerRootView } from '../GestureHandler';\nimport HeaderContainer from '../Header/HeaderContainer';\nimport CardStack from './CardStack';\nconst GestureHandlerWrapper = GestureHandlerRootView ?? View;\n\n/**\n * Compare two arrays with primitive values as the content.\n * We need to make sure that both values and order match.\n */\nconst isArrayEqual = (a, b) => a.length === b.length && a.every((it, index) => it === b[index]);\nexport default class StackView extends React.Component {\n  constructor() {\n    super(...arguments);\n    _defineProperty(this, \"state\", {\n      routes: [],\n      previousRoutes: [],\n      previousDescriptors: {},\n      openingRouteKeys: [],\n      closingRouteKeys: [],\n      replacingRouteKeys: [],\n      descriptors: {}\n    });\n    _defineProperty(this, \"getPreviousRoute\", _ref => {\n      let {\n        route\n      } = _ref;\n      const {\n        closingRouteKeys,\n        replacingRouteKeys\n      } = this.state;\n      const routes = this.state.routes.filter(r => r.key === route.key || !closingRouteKeys.includes(r.key) && !replacingRouteKeys.includes(r.key));\n      const index = routes.findIndex(r => r.key === route.key);\n      return routes[index - 1];\n    });\n    _defineProperty(this, \"renderScene\", _ref2 => {\n      let {\n        route\n      } = _ref2;\n      const descriptor = this.state.descriptors[route.key] || this.props.descriptors[route.key];\n      if (!descriptor) {\n        return null;\n      }\n      return descriptor.render();\n    });\n    _defineProperty(this, \"renderHeader\", props => {\n      return /*#__PURE__*/React.createElement(HeaderContainer, props);\n    });\n    _defineProperty(this, \"handleOpenRoute\", _ref3 => {\n      let {\n        route\n      } = _ref3;\n      const {\n        state,\n        navigation\n      } = this.props;\n      const {\n        closingRouteKeys,\n        replacingRouteKeys\n      } = this.state;\n      if (closingRouteKeys.some(key => key === route.key) && replacingRouteKeys.every(key => key !== route.key) && state.routeNames.includes(route.name) && !state.routes.some(r => r.key === route.key)) {\n        // If route isn't present in current state, but was closing, assume that a close animation was cancelled\n        // So we need to add this route back to the state\n        navigation.navigate(route);\n      } else {\n        this.setState(state => ({\n          routes: state.replacingRouteKeys.length ? state.routes.filter(r => !state.replacingRouteKeys.includes(r.key)) : state.routes,\n          openingRouteKeys: state.openingRouteKeys.filter(key => key !== route.key),\n          closingRouteKeys: state.closingRouteKeys.filter(key => key !== route.key),\n          replacingRouteKeys: []\n        }));\n      }\n    });\n    _defineProperty(this, \"handleCloseRoute\", _ref4 => {\n      let {\n        route\n      } = _ref4;\n      const {\n        state,\n        navigation\n      } = this.props;\n      if (state.routes.some(r => r.key === route.key)) {\n        // If a route exists in state, trigger a pop\n        // This will happen in when the route was closed from the card component\n        // e.g. When the close animation triggered from a gesture ends\n        navigation.dispatch({\n          ...StackActions.pop(),\n          source: route.key,\n          target: state.key\n        });\n      } else {\n        // We need to clean up any state tracking the route and pop it immediately\n        this.setState(state => ({\n          routes: state.routes.filter(r => r.key !== route.key),\n          openingRouteKeys: state.openingRouteKeys.filter(key => key !== route.key),\n          closingRouteKeys: state.closingRouteKeys.filter(key => key !== route.key)\n        }));\n      }\n    });\n    _defineProperty(this, \"handleTransitionStart\", (_ref5, closing) => {\n      let {\n        route\n      } = _ref5;\n      return this.props.navigation.emit({\n        type: 'transitionStart',\n        data: {\n          closing\n        },\n        target: route.key\n      });\n    });\n    _defineProperty(this, \"handleTransitionEnd\", (_ref6, closing) => {\n      let {\n        route\n      } = _ref6;\n      return this.props.navigation.emit({\n        type: 'transitionEnd',\n        data: {\n          closing\n        },\n        target: route.key\n      });\n    });\n    _defineProperty(this, \"handleGestureStart\", _ref7 => {\n      let {\n        route\n      } = _ref7;\n      this.props.navigation.emit({\n        type: 'gestureStart',\n        target: route.key\n      });\n    });\n    _defineProperty(this, \"handleGestureEnd\", _ref8 => {\n      let {\n        route\n      } = _ref8;\n      this.props.navigation.emit({\n        type: 'gestureEnd',\n        target: route.key\n      });\n    });\n    _defineProperty(this, \"handleGestureCancel\", _ref9 => {\n      let {\n        route\n      } = _ref9;\n      this.props.navigation.emit({\n        type: 'gestureCancel',\n        target: route.key\n      });\n    });\n  }\n  static getDerivedStateFromProps(props, state) {\n    // If there was no change in routes, we don't need to compute anything\n    if ((props.state.routes === state.previousRoutes || isArrayEqual(props.state.routes.map(r => r.key), state.previousRoutes.map(r => r.key))) && state.routes.length) {\n      let routes = state.routes;\n      let previousRoutes = state.previousRoutes;\n      let descriptors = props.descriptors;\n      let previousDescriptors = state.previousDescriptors;\n      if (props.descriptors !== state.previousDescriptors) {\n        descriptors = state.routes.reduce((acc, route) => {\n          acc[route.key] = props.descriptors[route.key] || state.descriptors[route.key];\n          return acc;\n        }, {});\n        previousDescriptors = props.descriptors;\n      }\n      if (props.state.routes !== state.previousRoutes) {\n        // if any route objects have changed, we should update them\n        const map = props.state.routes.reduce((acc, route) => {\n          acc[route.key] = route;\n          return acc;\n        }, {});\n        routes = state.routes.map(route => map[route.key] || route);\n        previousRoutes = props.state.routes;\n      }\n      return {\n        routes,\n        previousRoutes,\n        descriptors,\n        previousDescriptors\n      };\n    }\n\n    // Here we determine which routes were added or removed to animate them\n    // We keep a copy of the route being removed in local state to be able to animate it\n\n    let routes = props.state.index < props.state.routes.length - 1 ?\n    // Remove any extra routes from the state\n    // The last visible route should be the focused route, i.e. at current index\n    props.state.routes.slice(0, props.state.index + 1) : props.state.routes;\n\n    // Now we need to determine which routes were added and removed\n    let {\n      openingRouteKeys,\n      closingRouteKeys,\n      replacingRouteKeys,\n      previousRoutes\n    } = state;\n    const previousFocusedRoute = previousRoutes[previousRoutes.length - 1];\n    const nextFocusedRoute = routes[routes.length - 1];\n    const isAnimationEnabled = key => {\n      const descriptor = props.descriptors[key] || state.descriptors[key];\n      return descriptor ? descriptor.options.animationEnabled !== false : true;\n    };\n    const getAnimationTypeForReplace = key => {\n      const descriptor = props.descriptors[key] || state.descriptors[key];\n      return descriptor.options.animationTypeForReplace ?? 'push';\n    };\n    if (previousFocusedRoute && previousFocusedRoute.key !== nextFocusedRoute.key) {\n      // We only need to animate routes if the focused route changed\n      // Animating previous routes won't be visible coz the focused route is on top of everything\n\n      if (!previousRoutes.some(r => r.key === nextFocusedRoute.key)) {\n        // A new route has come to the focus, we treat this as a push\n        // A replace can also trigger this, the animation should look like push\n\n        if (isAnimationEnabled(nextFocusedRoute.key) && !openingRouteKeys.includes(nextFocusedRoute.key)) {\n          // In this case, we need to animate pushing the focused route\n          // We don't care about animating any other added routes because they won't be visible\n          openingRouteKeys = [...openingRouteKeys, nextFocusedRoute.key];\n          closingRouteKeys = closingRouteKeys.filter(key => key !== nextFocusedRoute.key);\n          replacingRouteKeys = replacingRouteKeys.filter(key => key !== nextFocusedRoute.key);\n          if (!routes.some(r => r.key === previousFocusedRoute.key)) {\n            // The previous focused route isn't present in state, we treat this as a replace\n\n            openingRouteKeys = openingRouteKeys.filter(key => key !== previousFocusedRoute.key);\n            if (getAnimationTypeForReplace(nextFocusedRoute.key) === 'pop') {\n              closingRouteKeys = [...closingRouteKeys, previousFocusedRoute.key];\n\n              // By default, new routes have a push animation, so we add it to `openingRouteKeys` before\n              // But since user configured it to animate the old screen like a pop, we need to add this without animation\n              // So remove it from `openingRouteKeys` which will remove the animation\n              openingRouteKeys = openingRouteKeys.filter(key => key !== nextFocusedRoute.key);\n\n              // Keep the route being removed at the end to animate it out\n              routes = [...routes, previousFocusedRoute];\n            } else {\n              replacingRouteKeys = [...replacingRouteKeys, previousFocusedRoute.key];\n              closingRouteKeys = closingRouteKeys.filter(key => key !== previousFocusedRoute.key);\n\n              // Keep the old route in the state because it's visible under the new route, and removing it will feel abrupt\n              // We need to insert it just before the focused one (the route being pushed)\n              // After the push animation is completed, routes being replaced will be removed completely\n              routes = routes.slice();\n              routes.splice(routes.length - 1, 0, previousFocusedRoute);\n            }\n          }\n        }\n      } else if (!routes.some(r => r.key === previousFocusedRoute.key)) {\n        // The previously focused route was removed, we treat this as a pop\n\n        if (isAnimationEnabled(previousFocusedRoute.key) && !closingRouteKeys.includes(previousFocusedRoute.key)) {\n          closingRouteKeys = [...closingRouteKeys, previousFocusedRoute.key];\n\n          // Sometimes a route can be closed before the opening animation finishes\n          // So we also need to remove it from the opening list\n          openingRouteKeys = openingRouteKeys.filter(key => key !== previousFocusedRoute.key);\n          replacingRouteKeys = replacingRouteKeys.filter(key => key !== previousFocusedRoute.key);\n\n          // Keep a copy of route being removed in the state to be able to animate it\n          routes = [...routes, previousFocusedRoute];\n        }\n      } else {\n        // Looks like some routes were re-arranged and no focused routes were added/removed\n        // i.e. the currently focused route already existed and the previously focused route still exists\n        // We don't know how to animate this\n      }\n    } else if (replacingRouteKeys.length || closingRouteKeys.length) {\n      // Keep the routes we are closing or replacing if animation is enabled for them\n      routes = routes.slice();\n      routes.splice(routes.length - 1, 0, ...state.routes.filter(_ref10 => {\n        let {\n          key\n        } = _ref10;\n        return isAnimationEnabled(key) ? replacingRouteKeys.includes(key) || closingRouteKeys.includes(key) : false;\n      }));\n    }\n    if (!routes.length) {\n      throw new Error('There should always be at least one route in the navigation state.');\n    }\n    const descriptors = routes.reduce((acc, route) => {\n      acc[route.key] = props.descriptors[route.key] || state.descriptors[route.key];\n      return acc;\n    }, {});\n    return {\n      routes,\n      previousRoutes: props.state.routes,\n      previousDescriptors: props.descriptors,\n      openingRouteKeys,\n      closingRouteKeys,\n      replacingRouteKeys,\n      descriptors\n    };\n  }\n  render() {\n    const {\n      state,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      descriptors: _,\n      ...rest\n    } = this.props;\n    const {\n      routes,\n      descriptors,\n      openingRouteKeys,\n      closingRouteKeys\n    } = this.state;\n    return /*#__PURE__*/React.createElement(GestureHandlerWrapper, {\n      style: styles.container\n    }, /*#__PURE__*/React.createElement(SafeAreaProviderCompat, null, /*#__PURE__*/React.createElement(SafeAreaInsetsContext.Consumer, null, insets => /*#__PURE__*/React.createElement(ModalPresentationContext.Consumer, null, isParentModal => /*#__PURE__*/React.createElement(HeaderShownContext.Consumer, null, isParentHeaderShown => /*#__PURE__*/React.createElement(CardStack, _extends({\n      insets: insets,\n      isParentHeaderShown: isParentHeaderShown,\n      isParentModal: isParentModal,\n      getPreviousRoute: this.getPreviousRoute,\n      routes: routes,\n      openingRouteKeys: openingRouteKeys,\n      closingRouteKeys: closingRouteKeys,\n      onOpenRoute: this.handleOpenRoute,\n      onCloseRoute: this.handleCloseRoute,\n      onTransitionStart: this.handleTransitionStart,\n      onTransitionEnd: this.handleTransitionEnd,\n      renderHeader: this.renderHeader,\n      renderScene: this.renderScene,\n      state: state,\n      descriptors: descriptors,\n      onGestureStart: this.handleGestureStart,\n      onGestureEnd: this.handleGestureEnd,\n      onGestureCancel: this.handleGestureCancel\n    }, rest)))))));\n  }\n}\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1\n  }\n});\n//# sourceMappingURL=StackView.js.map"]},"metadata":{},"sourceType":"module"}