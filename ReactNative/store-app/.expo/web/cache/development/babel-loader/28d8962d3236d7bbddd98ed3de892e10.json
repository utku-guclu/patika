{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { useTheme } from '@react-navigation/native';\nimport * as React from 'react';\nimport StatusBar from \"react-native-web/dist/exports/StatusBar\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nexport default function ModalStatusBarManager(_ref) {\n  var _flattenedStyle$trans, _flattenedStyle$trans2;\n  var dark = _ref.dark,\n    layout = _ref.layout,\n    insets = _ref.insets,\n    style = _ref.style;\n  var _useTheme = useTheme(),\n    darkTheme = _useTheme.dark;\n  var _React$useState = React.useState(true),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    overlapping = _React$useState2[0],\n    setOverlapping = _React$useState2[1];\n  var scale = 1 - 20 / layout.width;\n  var offset = (insets.top - 34) * scale;\n  var flattenedStyle = StyleSheet.flatten(style);\n  var translateY = flattenedStyle === null || flattenedStyle === void 0 ? void 0 : (_flattenedStyle$trans = flattenedStyle.transform) === null || _flattenedStyle$trans === void 0 ? void 0 : (_flattenedStyle$trans2 = _flattenedStyle$trans.find(function (s) {\n    return s.translateY !== undefined;\n  })) === null || _flattenedStyle$trans2 === void 0 ? void 0 : _flattenedStyle$trans2.translateY;\n  React.useEffect(function () {\n    var listener = function listener(_ref2) {\n      var value = _ref2.value;\n      setOverlapping(value < offset);\n    };\n    var sub = translateY === null || translateY === void 0 ? void 0 : translateY.addListener(listener);\n    return function () {\n      return translateY === null || translateY === void 0 ? void 0 : translateY.removeListener(sub);\n    };\n  }, [offset, translateY]);\n  var darkContent = dark != null ? dark : !darkTheme;\n  return React.createElement(StatusBar, {\n    animated: true,\n    barStyle: overlapping && darkContent ? 'dark-content' : 'light-content'\n  });\n}","map":{"version":3,"sources":["ModalStatusBarManager.tsx"],"names":["useTheme","React","ModalStatusBarManager","dark","layout","insets","style","darkTheme","overlapping","setOverlapping","useState","scale","width","offset","top","flattenedStyle","StyleSheet","flatten","translateY","transform","find","s","undefined","useEffect","listener","value","sub","addListener","removeListener","darkContent"],"mappings":";AAAA,SAASA,QAAQ,QAAQ,0BAA0B;AACnD,OAAO,KAAKC,KAAK,MAAM,OAAO;AAAA;AAAA;AAa9B,eAAe,SAASC,qBAAqB,CAAA,IAAA,EAKnC;EAAA,IAAA,qBAAA,EAAA,sBAAA;EALoC,IAC5CC,IAAI,GAIE,IAAA,CAJNA,IAAI;IACJC,MAAM,GAGA,IAAA,CAHNA,MAAM;IACNC,MAAM,GAEA,IAAA,CAFNA,MAAM;IACNC,KAAAA,GACM,IAAA,CADNA,KAAAA;EAEA,gBAA4BN,QAAQ,EAAE;IAAxBO,SAAAA,aAANJ,IAAI;EACZ,sBAAsCF,KAAK,CAACS,QAAQ,CAAC,IAAI,CAAC;IAAA;IAAnDF,WAAW;IAAEC,cAAc;EAElC,IAAME,KAAK,GAAG,CAAC,GAAG,EAAE,GAAGP,MAAM,CAACQ,KAAK;EACnC,IAAMC,MAAM,GAAG,CAACR,MAAM,CAACS,GAAG,GAAG,EAAE,IAAIH,KAAK;EAExC,IAAMI,cAAc,GAAGC,UAAU,CAACC,OAAO,CAACX,KAAK,CAAC;EAChD,IAAMY,UAAU,GAAGH,cAAc,KAAA,IAAA,IAAdA,cAAc,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,CAAA,qBAAA,GAAdA,cAAc,CAAEI,SAAS,MAAA,IAAA,IAAA,qBAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,CAAA,sBAAA,GAAzBJ,qBAAAA,CAA2BK,IAAI,CAC/CC,UAAAA,CAAM;IAAA,OAAKA,CAAC,CAACH,UAAU,KAAKI,SAAS;EAAA,EACvC,MAAA,IAAA,IAAA,sBAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAFkBP,sBAAAA,CAEhBG,UAAU;EAEbjB,KAAK,CAACsB,SAAS,CAAC,YAAM;IACpB,IAAMC,QAAQ,GAAG,SAAXA,QAAQ,CAAG,KAAA,EAAkC;MAAjC,IAAEC,KAAAA,GAA0B,KAAA,CAA1BA,KAAAA;MAClBhB,cAAc,CAACgB,KAAK,GAAGZ,MAAM,CAAC;IAChC,CAAC;IAED,IAAMa,GAAG,GAAGR,UAAU,KAAA,IAAA,IAAVA,UAAU,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAVA,UAAU,CAAES,WAAW,CAACH,QAAQ,CAAC;IAE7C,OAAO;MAAA,OAAMN,UAAU,KAAA,IAAA,IAAVA,UAAU,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAVA,UAAU,CAAEU,cAAc,CAACF,GAAG,CAAC;IAAA;EAC9C,CAAC,EAAE,CAACb,MAAM,EAAEK,UAAU,CAAC,CAAC;EAExB,IAAMW,WAAW,GAAG1B,IAAI,WAAJA,IAAI,GAAI,CAACI,SAAS;EAEtC,OACE,KAAA,CAAA,aAAA,CAAC,SAAS,EAAA;IACR,QAAQ,EAAA,IAAA;IACR,QAAQ,EAAEC,WAAW,IAAIqB,WAAW,GAAG,cAAc,GAAG;EAAgB,CAAA,CACxE;AAEN","sourceRoot":"../../src","sourcesContent":["import { useTheme } from '@react-navigation/native';\nimport * as React from 'react';\nimport { StatusBar, StyleSheet } from 'react-native';\nexport default function ModalStatusBarManager(_ref) {\n  var _flattenedStyle$trans, _flattenedStyle$trans2;\n  let {\n    dark,\n    layout,\n    insets,\n    style\n  } = _ref;\n  const {\n    dark: darkTheme\n  } = useTheme();\n  const [overlapping, setOverlapping] = React.useState(true);\n  const scale = 1 - 20 / layout.width;\n  const offset = (insets.top - 34) * scale;\n  const flattenedStyle = StyleSheet.flatten(style);\n  const translateY = flattenedStyle === null || flattenedStyle === void 0 ? void 0 : (_flattenedStyle$trans = flattenedStyle.transform) === null || _flattenedStyle$trans === void 0 ? void 0 : (_flattenedStyle$trans2 = _flattenedStyle$trans.find(s => s.translateY !== undefined)) === null || _flattenedStyle$trans2 === void 0 ? void 0 : _flattenedStyle$trans2.translateY;\n  React.useEffect(() => {\n    const listener = _ref2 => {\n      let {\n        value\n      } = _ref2;\n      setOverlapping(value < offset);\n    };\n    const sub = translateY === null || translateY === void 0 ? void 0 : translateY.addListener(listener);\n    return () => translateY === null || translateY === void 0 ? void 0 : translateY.removeListener(sub);\n  }, [offset, translateY]);\n  const darkContent = dark ?? !darkTheme;\n  return /*#__PURE__*/React.createElement(StatusBar, {\n    animated: true,\n    barStyle: overlapping && darkContent ? 'dark-content' : 'light-content'\n  });\n}\n//# sourceMappingURL=ModalStatusBarManager.js.map"]},"metadata":{},"sourceType":"module"}